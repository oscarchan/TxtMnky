from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import create_engine
from sqlalchemy import ForeignKey
from sqlalchemy import Column, Integer, String, DateTime
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.orm import relationship, backref
import os

ENGINE = create_engine("sqlite:///txtmnky.sqlite3", 
                       echo=True) 
# signified current directory

session = scoped_session(sessionmaker(bind=ENGINE, autocommit = True, autoflush = False))
    # ENGINE: here is how to connect
    # ORM:  generate SQL for you
    # echo: print out what was generated by ORM; good for debugging

#Base is a class defined in SQLAlchemy
Base = declarative_base()
#Base.query = session.query_property()


class Survey(Base):
    __tablename__ = "surveys"
    id = Column(Integer, primary_key = True)
    twilio_owner_id = Column(Integer, nullable=False)
    question = Column(String(140), nullable=False)
    creation_date = Column(DateTime, nullable=True)

    def __init__(self, id= None, twilio_owner_id  = None, question = None, creation_date = None):
    	self.id = id
    	self.twilio_owner_id = twilio_owner_id
    	self.question = question
        self.creation_date = creation_date

    def __str__(self):
        return "Survey[%s, owner=%s, created_at=%s, %s]" % (self.id, self.twilio_owner_id, self.creation_date, self.question)

class SurveyRespondent(Base):
    __tablename__ = "survey_respondents"
    respondent_number = Column(String, primary_key = True) 
    survey_id = Column(Integer, nullable=False, primary_key = True)
    creation_date = Column(DateTime, nullable=True)
    
    def __init__(self, respondent_number= None, survey_id  = None, creation_date = None):
    	self.respondent_number = respondent_number
    	self.survey_id = survey_id
        self.creation_date = creation_date

    def __str__(self):
        return "Respondent[%s, sid=%s, created_at=%s]" % (self.respondent_number, self.survey_id)

class SurveyResponse(Base):
    __tablename__ = "survey_responses"
    id = Column(Integer, primary_key = True)
    survey_id = Column(Integer, nullable=False)
    respondent_number = Column(String, nullable=False)
    response = Column(String(140), nullable=False)
    sms_id = Column(String(100), nullable=False)

    def __str__(self):
        return "Response[%s, sid=%s, number=%s, sms_id=%s, %s]" % (self.id, self.survey_id, self.respondent_number, sms_id, response)
    

def create_db():
    Base.metadata.create_all(ENGINE)

create_db()

def main():
   pass
  
if __name__ == "__main__":
   main()
